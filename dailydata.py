# -*- coding: utf-8 -*-
"""Dailydata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r0wdcLv__z7eD9y754LJ6IwwozkhkCqg

### Installing the required libraries
"""

pip install pandas matplotlib seaborn prophet scikit-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

"""### Loading Daily Data"""

daily_data = pd.read_csv(r"C:\Users\shrav\Downloads\SN_d_tot_V2.0.csv", delimiter=';', header=None)
daily_data.columns = ["Year", "Month", "Day", "FractionalYear", "SunspotNumber", "StdDev", "Observations", "Indicator"]
daily_data = daily_data[daily_data["SunspotNumber"] != -1]  # Remove missing values
daily_data['Date'] = pd.to_datetime(daily_data[['Year', 'Month', 'Day']])
daily_data = daily_data[['Date', 'SunspotNumber']].rename(columns={'Date': 'ds', 'SunspotNumber': 'y'})

daily_data['y'] = daily_data['y'].replace(0, 1e-6)  # Replace zeros with a small positive value

daily_data['y'] = daily_data['y'].apply(lambda x: np.log(x + 1e-6))  # Log transform with small constant

daily_data = daily_data[daily_data['y'] > 0]  # Remove zero values

"""### Training the FBProphet Model"""

# Initialize Prophet Model
daily_model = Prophet()

# Fit the model
daily_model.fit(daily_data)

# Create future dataframe (365 days)
future_daily = daily_model.make_future_dataframe(periods=365)

# Predict
forecast_daily = daily_model.predict(future_daily)

# Predict for 100, 200, and 365 days
future_daily_100 = daily_model.make_future_dataframe(periods=100)
future_daily_200 = daily_model.make_future_dataframe(periods=200)
future_daily_365 = daily_model.make_future_dataframe(periods=365)

# Predict 100 days
forecast_daily_100 = daily_model.predict(future_daily_100)

# Predict 200 days
forecast_daily_200 = daily_model.predict(future_daily_200)

# Predict 365 days
forecast_daily_365 = daily_model.predict(future_daily_365)

# Visualize predictions for each forecast
fig_100 = daily_model.plot(forecast_daily_100)
plt.title("Sunspot Forecast: Next 100 Days")
plt.show()

fig_200 = daily_model.plot(forecast_daily_200)
plt.title("Sunspot Forecast: Next 200 Days")
plt.show()

fig_365 = daily_model.plot(forecast_daily_365)
plt.title("Sunspot Forecast: Next 365 Days")
plt.show()

# For 100 days prediction
print("Predicted values for the next 100 days:")
print(forecast_daily_100[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(100))

# For 200 days prediction
print("Predicted values for the next 200 days:")
print(forecast_daily_200[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(200))

# For 365 days prediction
print("Predicted values for the next 365 days:")
print(forecast_daily_365[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(365))

"""### Visualizing Predictions"""

fig = daily_model.plot(forecast_daily)
plt.title("Daily Sunspot Forecasting")
plt.xlabel("Date")
plt.ylabel("Sunspot Number")
plt.show()

"""### Tune Hyperparameters : Adding custom seasonality"""

daily_model = Prophet(growth='linear', changepoint_prior_scale=0.05)
daily_model.add_seasonality(name='yearly', period=365.25, fourier_order=10)

# Fit and Predict again
daily_model.fit(daily_data)
forecast_daily = daily_model.predict(future_daily)

"""### Evaluating Model Performance"""

y_true = daily_data['y'].tail(100)
y_pred = forecast_daily['yhat'][-100:]

mae = mean_absolute_error(y_true, y_pred)
mape = mean_absolute_percentage_error(y_true, y_pred)
r2 = r2_score(y_true, y_pred)

print(f"MAE: {mae}, MAPE: {mape}, RÂ²: {r2}")