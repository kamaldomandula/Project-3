# -*- coding: utf-8 -*-
"""Yearlydata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hoNr5cMYBzcPXmQYz5KAknUsZ5v9yzXA

### Installing the required libraries
"""

pip install pandas matplotlib seaborn prophet scikit-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

"""### Loading Daily Data"""

import pandas as pd

# Load the yearly dataset
file_path = r"C:\Users\shrav\Downloads\SN_y_tot_V2.0.csv" # Update this with the correct path
data = pd.read_csv(file_path, delimiter=';', header=None)
# Select only the relevant columns
data = data[[0, 1]]  # Adjust indices based on the dataset structure

# Rename selected columns
data.columns = ['Year', 'Mean Sunspot Number']

# Drop rows with missing values (if necessary)
data = data[data['Mean Sunspot Number'] >= 0]

# Convert 'Year' to datetime
data['Year'] = pd.to_datetime(data['Year'], format='%Y')

# Prepare data for Prophet
data = data[['Year', 'Mean Sunspot Number']].rename(columns={'Year': 'ds', 'Mean Sunspot Number': 'y'})

data['y'] = data['y'].replace(0, 1e-6)  # Replace zeros with a small positive value

data['y'] = data['y'].apply(lambda x: np.log(x + 1e-6))  # Log transform with small constant

data = data[data['y'] > 0]  # Remove zero values
data = data[(data['ds'] >= '1677-09-21') & (data['ds'] <= '2262-04-11')]
print(data['ds'].min(), data['ds'].max())

from prophet import Prophet
df = pd.read_csv(r"C:\Users\shrav\Downloads\SN_y_tot_V2.0.csv")
print("Columns in DataFrame:", df.columns.tolist())

# Step 2: Display the first few rows of the DataFrame
print("First few rows of the DataFrame:")
print(df.head())

# Step 3: If 'ds' column exists, proceed with conversion
if 'ds' in df.columns:
    df['ds'] = pd.to_datetime(df['ds'], errors='coerce')
    if df['ds'].isna().any():
        print("Warning: There are invalid dates in your 'ds' column.")
        df = df.dropna(subset=['ds'])  # Drop rows with invalid dates
    print("Date range:", df['ds'].min(), "to", df['ds'].max())
else:
    print("Error: 'ds' column not found in the DataFrame.")

"""### Training the FBProphet Model"""

from prophet import Prophet

# Example DataFrame with 'ds' and 'y' columns
df = pd.DataFrame({
    'ds': pd.date_range(start='2020-01-01', periods=100),
    'y': range(100)
})

# Initialize the Prophet model
model = Prophet()

# Fit the model
model.fit(df)

# Make future predictions
future = model.make_future_dataframe(periods=30)
forecast = model.predict(future)

# Display the forecast
print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']])

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

# Load dataset
data = pd.read_csv("SN_y_tot_V2.0.csv", delimiter=';', header=None)
data = data[[0, 1]]
data.columns = ['Year', 'Mean Sunspot Number']

# Filter out invalid values
data = data[data['Mean Sunspot Number'] >= 0]

# Convert 'Year' to datetime
data['Year'] = pd.to_datetime(data['Year'], format='%Y')

# Rename columns for Prophet
data = data.rename(columns={'Year': 'ds', 'Mean Sunspot Number': 'y'})

# Normalize 'ds' to years (relative to the minimum year)
data['ds'] = (data['ds'].dt.year - data['ds'].dt.year.min())

# Check data types and print first few rows
print(data.info())
print(data.head())

# Initialize Prophet
model = Prophet()

# Fit the model
model.fit(data)

# Make predictions for the next 20 years
future = model.make_future_dataframe(periods=20, freq='YE')
forecast = model.predict(future)

# Plot the forecast
fig = model.plot(forecast)
plt.title("Sunspot Forecasting with Prophet")
plt.xlabel("Year")
plt.ylabel("Mean Sunspot Number")
plt.show()

# Convert back to actual years
forecast['ds'] = pd.to_datetime(forecast['ds'], errors='coerce')
data['ds'] = pd.to_datetime(data['ds'])
print(data['ds'].dtype)  # Should show datetime64[ns]



# Plot the forecast with real years
fig = model.plot(forecast)
plt.title("Sunspot Forecasting with Prophet")
plt.xlabel("Year")
plt.ylabel("Mean Sunspot Number")
plt.show()

# Ensure 'ds' is datetime
data['ds'] = pd.to_datetime(data['ds'], errors='coerce')

# Filter out invalid dates
data = data[(data['ds'] >= '1900-01-01') & (data['ds'] <= '2100-01-01')]

# Find the minimum year
min_year = data['ds'].min()

# Calculate relative years safely
data['ds_years'] = (data['ds'] - min_year).dt.days / 365.25

daily_model = Prophet()

# Fit the model with your data
daily_model.fit(data)
# Predict for 100, 200, and 365 days
future_daily_100 = daily_model.make_future_dataframe(periods=100)
future_daily_200 = daily_model.make_future_dataframe(periods=200)
future_daily_365 = daily_model.make_future_dataframe(periods=365)

# Predict 100 days
forecast_daily_100 = daily_model.predict(future_daily_100)

# Predict 200 days
forecast_daily_200 = daily_model.predict(future_daily_200)

# Predict 365 days
forecast_daily_365 = daily_model.predict(future_daily_365)

# Visualize predictions for each forecast
fig_100 = daily_model.plot(forecast_daily_100)
plt.title("Sunspot Forecast: Next 100 Days")
plt.show()

fig_200 = daily_model.plot(forecast_daily_200)
plt.title("Sunspot Forecast: Next 200 Days")
plt.show()

fig_365 = daily_model.plot(forecast_daily_365)
plt.title("Sunspot Forecast: Next 365 Days")
plt.show()

# For 100 days prediction
print("Predicted values for the next 100 days:")
print(forecast_daily_100[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(100))

# For 200 days prediction
print("Predicted values for the next 200 days:")
print(forecast_daily_200[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(200))

# For 365 days prediction
print("Predicted values for the next 365 days:")
print(forecast_daily_365[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(365))

"""### Visualizing Predictions"""

# Generate a future dataframe
future_daily = daily_model.make_future_dataframe(periods=365)

# Predict future values
forecast_daily = daily_model.predict(future_daily)

# Plot the results
fig = daily_model.plot(forecast_daily)
fig = daily_model.plot(forecast_daily)
plt.title("Daily Sunspot Forecasting")
plt.xlabel("Date")
plt.ylabel("Sunspot Number")
plt.show()

"""### Tune Hyperparameters : Adding custom seasonality"""

# Create a sample DataFrame
daily_data = pd.DataFrame({
    'ds': pd.date_range(start='2023-01-01', periods=365),
    'y': [100 + i for i in range(365)]  # Sample data
})

daily_data['y'] = daily_data['y'].apply(lambda x: np.log(x + 1))

daily_model = Prophet(growth='linear', changepoint_prior_scale=0.05)
daily_model.add_seasonality(name='yearly', period=365.25, fourier_order=10)

# Fit and Predict again
daily_model.fit(daily_data)
forecast_daily = daily_model.predict(future_daily)

"""### Evaluating Model Performance"""

y_true = daily_data['y'].tail(100)
y_pred = forecast_daily['yhat'][-100:]

mae = mean_absolute_error(y_true, y_pred)
mape = mean_absolute_percentage_error(y_true, y_pred)
r2 = r2_score(y_true, y_pred)

print(f"MAE: {mae}, MAPE: {mape}, RÂ²: {r2}")